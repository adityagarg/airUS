a$data
str(a$data)
str(a$mapping)
str(a$labels)
str(a$labels$fill)
a$labels$fill
a$]
a$mapping
a$layers
a$scales
c=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=margin), color='white')+scale_fill_viridis()
c=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=margin), color='white')+scale_fill_gradient2()
grid.arrange(c)
c=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=margin), color='white')+scale_fill_gradient2(low="red", high=muted("green"))
c=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=margin), color='white')+scale_colour_gradient2(low="red", high=muted("green"))
c=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=margin), color='white')+scale_colour_gradient2(low="red", high="green")
grid.arrange(c)
c=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=margin), color='white')+scale_fill_gradient2(low="red", high="green")
grid.arrange(c)
c=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=margin), color='white')+scale_fill_gradient2(space='lab;)
grid.arrange(c)
range(sales$margin, na.rm = TRUE)
c=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=margin), color='white')+scale_fill_gradient2(space='lab')
c=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=margin), color='white')+scale_fill_gradient2()
grid.arrange(c)
c=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=Gross.margin), color='white')+scale_fill_gradient2()
grid.arrange(c)
c=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=margin), color='white')+scale_fill_gradient2()
grid.arrange(c)
c=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=scale(margin)), color='white')+scale_fill_gradient2()
grid.arrange(c)
score=read.csv("Most-Recent-Cohorts-Scorecard-Elements.csv")
str(score)
install.packages("mi")
library('mi')
image(missing_data.frame(score))
scoreSub=sample(score, size = 1000)
score=read.csv("Most-Recent-Cohorts-Scorecard-Elements.csv")
length(score)
nrows(score)
nrow(score)
str(score)
scoreSub=sample(score, 1000)
scoreSub=sample(score, 1000, replace = TRUE)
View(scoreSub)
sample(nrow(score), 100)
sample(score, 100)
str(sample(score, 100))
sample(nrow(score), 1000)
scoreSub=score[sample(nrow(score), 1000),]
image(missing_data.frame(scoreSub))
scoreSub=score[sample(nrow(score), 100),]
image(missing_data.frame(scoreSub))
scoreSub=score[sample(nrow(score), 10),]
image(missing_data.frame(scoreSub))
scoreSub=score[sample(nrow(score), 1000),]
image(missing_data.frame(scoreSub))
summary(score)
score=read.csv("Most-Recent-Cohorts-Scorecard-Elements.csv", na = c("", "NULL"))
scoreSub=score[sample(nrow(score), 1000),]
image(missing_data.frame(scoreSub))
scoreSub=score[sample(nrow(score), 1000),]
install.packages('betareg')
image(missing_data.frame(scoreSub))
install.packages('extracat')
summary(scoreSub)
library('extracat')
visna(scoreSub)
library(tidyr)
library(dplyr)
library(tibble)
library(viridis)
str(cars)
str(mycars)
str(subSco)
str(scoreSub)
rowSum(is.na(scoreSub))
rowSums(is.na(scoreSub))
?rowSums
length(rowSums(is.na(scoreSub)))
plot(rowSums(is.na(scoreSub)))
hist(rowSums(is.na(scoreSub)))
hist(colSums(is.na(scoreSub)))
plot(colSums(is.na(scoreSub)))
complete.cases(scoreSub)
table(complete.cases(scoreSub))
table(complete.cases(score))
table(colSums(is.na(scoreSub)))
colSums(is.na(scoreSub))
colSums(is.na(scoreSub))<0.05*nrow(scoreSub)
scoreNa=scoreNa[,colSums(is.na(scoreSub))<0.05*nrow(scoreSub)]
scoreNa=scoreSub[,colSums(is.na(scoreSub))<0.05*nrow(scoreSub)]
scoreNa=scoreSub[,colSums(is.na(scoreSub))>0.05*nrow(scoreSub)]
View(scoreNa)
scoreNa=scoreSub[,colSums(is.na(scoreSub))>0.1*nrow(scoreSub)]
image(missing_data.frame(scoreSub))
scoreNa=scoreSub[,colSums(is.na(scoreSub))>0.2*nrow(scoreSub)]
image(missing_data.frame(scoreNA))
image(missing_data.frame(scoreNa))
scoreNa=scoreSub[,colSums(is.na(scoreSub))>0.1*nrow(scoreSub)]
image(missing_data.frame(scoreNa))
summary(scoreNa)
colnames(scoreSub)
grep("PCIP",colnames(scoreSub))
length(grep("PCIP",colnames(scoreSub)))
scoreSub2=scoreSub[,!grep("PCIP",colnames(scoreSub))]
View(scoreSub2)
scoreSub2=scoreSub[,grep("PCIP",colnames(scoreSub))]
View(scoreSub2)
scoreSub2=scoreSub[,-grep("PCIP",colnames(scoreSub))]
View(scoreSub2)
image(missing_data.frame(scoreSub2))
scoreSub2=scoreSub[,-grep("PCIP|UGDS",colnames(scoreSub))]
image(missing_data.frame(scoreSub2))
scoreNa=scoreSub[,colSums(is.na(scoreSub))>0.1*nrow(scoreSub)]
scoreSub2=scoreNA[,-grep("PCIP|UGDS",colnames(scoreSub))]
scoreSub2=scoreNa[,-grep("PCIP|UGDS",colnames(scoreSub))]
image(missing_data.frame(scoreNa))
image(missing_data.frame(scoreSub2))
scoreSub2=scoreNa[,-grep("PCIP|UGDS",colnames(scoreNa))]
image(missing_data.frame(scoreSub2))
image(missing_data.frame(scoreNa))
visna(scoreSub2)
?Punishment
a <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(age, attitude), fill=age))
grid.arrange(a)
a <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(attitude, age), fill=age))
grid.arrange(a)
a <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(attitude, age), fill=attitude))
grid.arrange(a)
a <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(education, age), fill=attitude))
grid.arrange(a)
a <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(age), fill=attitude))
grid.arrange(a)
a <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(age, memory), fill=attitude))
grid.arrange(a)
?mosaic
mosaic(Punishment, Memory ~ age)
mosaic(Punishment, formula= Memory ~ age)
mosaic(Memory ~ age, data=Punishment)
vcd::mosaic(Memory ~ age, data=Punishment)
vcd::mosaic(memory ~ age, data=Punishment)
vcd::mosaic(attitude ~ age, data=Punishment)
grid.arrange(a)
vcd::mosaic(attitude ~ age, data=Punishment)
vcd::mosaic(attitude ~ age + memory, data=Punishment)
?grid.arrange
grid.arrange(a,b, nrow=2 )
a <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(age, memory), fill=attitude))
b <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(memory, attitude), fill=memory))
grid.arrange(a,b, nrow=2 )
a <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(age), fill=attitude))
a <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(age), fill=attitude))
b <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(memory, attitude), fill=memory))
grid.arrange(a,b, nrow=2 )
b <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(education, age), fill=atitude))+facet_grid(memory~.)
grid.arrange(a,b, nrow=2 )
a <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(age), fill=attitude))
b <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(education, age), fill=attitude))+facet_grid(memory~.)
grid.arrange(a,b, nrow=2 )
grid.arrange(b)
b <- ggplot(data=Punishment)+geom_mosaic(aes(weight=attitude, x=product(education, age), fill=age))+facet_grid(memory~.)
grid.arrange(b)
b <- ggplot(data=Punishment)+geom_mosaic(aes(weight=frequency, x=product(attitude, age), fill=age))+facet_grid(memory~.)
grid.arrange(b)
b <- ggplot(data=Punishment)+geom_mosaic(aes(weight=frequency, x=product(age), fill=attitude))+facet_grid(memory~.)
grid.arrange(b)
b <- ggplot(data=Punishment)+geom_mosaic(aes(weight=frequency, x=product(education, age), fill=age))+facet_grid(memory~.)
grid.arrange(b)
b <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(attitude, age)))+facet_grid(memory~.)
grid.arrange(b)
b <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(attitude, age), fill=attitude))+facet_grid(memory~.)
grid.arrange(b)
b <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(age), fill=attitude))+facet_grid(memory~.)
grid.arrange(b)
a <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(age, education), fill=attitude))
b <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(age), fill=attitude))+facet_grid(memory~.)
grid.arrange(a,b)
a <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(age, education), fill=education))
b <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(age), fill=attitude))+facet_grid(memory~.)
grid.arrange(a,b)
a <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(attitude, education), fill=education))
b <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(age), fill=attitude))+facet_grid(memory~.)
grid.arrange(a,b)
a <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(attitude, education), fill=attitude))
b <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(age), fill=attitude))+facet_grid(memory~.)
grid.arrange(a,b)
a <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(education), fill=attitude))
b <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(age), fill=attitude))+facet_grid(memory~.)
grid.arrange(a,b)
a <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(education, age), fill=attitude))
b <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(age), fill=attitude))+facet_grid(memory~.)
grid.arrange(a,b)
a <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(age,education), fill=attitude))
b <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(age), fill=attitude))+facet_grid(memory~.)
grid.arrange(a,b)
a <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(attitude,education), fill=attitude))
b <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(age), fill=attitude))+facet_grid(memory~.)
grid.arrange(a,b)
library('vcd')
library('ggmosaic')
a <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(attitude,education), fill=attitude))
b <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(age), fill=attitude))+facet_grid(memory~.)
grid.arrange(a,b)
a <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(attitude,education), fill=attitude))+labs(x="Education ", title='Attitude ~ Education)
b <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(age), fill=attitude))+facet_grid(memory~.)
grid.arrange(a,b)
a <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(attitude,education), fill=attitude))+labs(x="Education ", title='Attitude ~ Education')
b <- ggplot(data=Punishment)+geom_mosaic(aes(weight=Freq, x=product(age), fill=attitude))+facet_grid(memory~.)+labs(x="Age ", title='Attitude ~ Age|Memory')
grid.arrange(a,b)
a=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=Revenue), color='white')+labs(title='Revenue of Countries over different Quarters')
grid.arrange(a)
a=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=Revenue), color='white')+labs(title='Revenue of Countries over different Quarters')+scale_fill_viridis
a=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=Revenue), color='white')+labs(title='Revenue of Countries over different Quarters')+scale_fill_viridis()
grid.arrange(a)
?scale
a=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=scale(Revenue)), color='white')+labs(title='Revenue of Countries over different Quarters')+scale_fill_viridis()
grid.arrange(a)
str(sales)
?geom_tile
?scale
a=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=Revenue), color='white')+labs(title='Revenue of Countries over different Quarters')+scale_fill_viridis()
grid.arrange(a)
grid.arrange(a)
a=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=Revenue), color='white')+labs(title='Revenue of Countries over different Quarters')+scale_fill_viridis()+theme(axis.text.x = element_text(size=7))
grid.arrange(a)
a=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=Revenue), color='white')+labs(title='Revenue of Countries over different Quarters')+scale_fill_viridis()+theme(axis.text.x = element_text(size=6))
grid.arrange(a)
?legend
?theme
a=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=Revenue), color='white')+labs(title='Revenue of Countries over different Quarters')+scale_fill_viridis()+theme(axis.text.x = element_text(size=6), legend.position = 'bottom')
grid.arrange(a)
a=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=Revenue), color='white')+labs(title='Revenue of Countries over different Quarters')+scale_fill_viridis()+theme(axis.text.x = element_text(size=6, vjust = 1), legend.position = 'bottom')
grid.arrange(a)
a=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=Revenue), color='white')+labs(title='Revenue of Countries over different Quarters')+scale_fill_viridis()+theme(axis.text.x = element_text(size=5), legend.position = 'bottom')
grid.arrange(a)
grid.arrange(a)
b=ggplot(sales, aes(Retailer.type,Product.line))+geom_tile(aes(fill=Revenue), color='white')+scale_fill_viridis()+labs(title='Revenue of Countries over different Quarters')
grid.arrange(a,b)
b=ggplot(sales, aes(Retailer.type,Product.line))+geom_tile(aes(fill=Revenue), color='white')+scale_fill_viridis()+labs(title='Revenue of Countries over different Quarters')+theme(axis.text.x = element_text(size=6), legend.position = 'bottom')
b
b=ggplot(sales, aes(Retailer.type,Product.line))+geom_tile(aes(fill=Revenue), color='white')+scale_fill_viridis()+labs(title='Revenue of Countries over different Quarters')+theme(axis.text = element_text(size=6), legend.position = 'bottom')
b
b=ggplot(sales, aes(Product.line,Retailer.type))+geom_tile(aes(fill=Revenue), color='white')+scale_fill_viridis()+labs(title='Retailer type vs Product Line (Revenue) ')+theme(axis.text = element_text(size=6), legend.position = 'bottom')
b
b=ggplot(sales, aes(Product.line,Retailer.type))+geom_tile(aes(fill=scale(Revenue)), color='white')+scale_fill_viridis()+labs(title='Retailer type vs Product Line (Revenue) ')+theme(axis.text = element_text(size=6), legend.position = 'bottom')
b
c=ggplot(sales, aes(Product.line,Retailer.type))+geom_tile(aes(fill=scale(Revenue)), color='white')+scale_fill_viridis()+labs(title='Retailer type vs Product Line (Revenue) ')+theme(axis.text = element_text(size=6), legend.position = 'bottom')
c=ggplot(sales, aes(Product.line,Retailer.type))+geom_tile(aes(fill=Revenue), color='white')+scale_fill_viridis()+labs(title='Retailer type vs Product Line (Revenue) ')+theme(axis.text = element_text(size=6), legend.position = 'bottom')
grid.arrange(b,c)
b=ggplot(sales, aes(Product.line,Retailer.type))+geom_tile(aes(fill=Revenue), color='white')+scale_fill_viridis()+labs(title='Retailer type vs Product Line (Revenue) ')+theme(axis.text = element_text(size=6), legend.position = 'bottom')
grid.arrange(b,c)
grid.arrange(b,c)
grid.arrange(b,
b
b=ggplot(sales, aes(scale(Product.line),Retailer.type))+geom_tile(aes(fill=Revenue), color='white')+scale_fill_viridis()+labs(title='Retailer type vs Product Line (Revenue) ')+theme(axis.text = element_text(size=6), legend.position = 'bottom')
b
b=ggplot(sales, aes(Product.line,Retailer.type))+geom_tile(aes(fill=Revenue), color='white')+scale_fill_viridis()+labs(title='Retailer type vs Product Line (Revenue) ')+theme(axis.text = element_text(size=6), legend.position = 'bottom')
b
c=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=scale(margin)), color='white')+scale_fill_gradient2()
grid.arrange(a,b)
c
c=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=scale(margin)), color='white')+labs(title='Absolute Gross Margin across Countries over different Quarters')+scale_fill_viridis()+theme(axis.text.x = element_text(size=6), legend.position = 'bottom')
c
sales$margin=sales$Gross.margin*sales$Revenue
c=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=scale(margin)), color='white')+labs(title='Absolute Gross Margin across Countries over different Quarters')+scale_fill_viridis()+theme(axis.text.x = element_text(size=6), legend.position = 'bottom')
c
sales$margin=sales$Gross.margin*sales$Revenue
threshold=mean(sales$Revenue)+1.5*sd(sales$Revenue)
threshold
sales=sales[sales$Revenue<threshold,]
ord=c('Q1 2012', 'Q2 2012', 'Q3 2012', 'Q4 2012', 'Q1 2013', 'Q2 2013', 'Q3 2013', 'Q4 2013', 'Q1 2014', 'Q2 2014', 'Q3 2014', 'Q4 2014')
c=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=scale(margin)), color='white')+labs(title='Absolute Gross Margin across Countries over different Quarters')+scale_fill_viridis()+theme(axis.text.x = element_text(size=6), legend.position = 'bottom')
c
c=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=scale(margin)), color='white')+labs(title='Absolute Gross Margin across Countries over different Quarters')+scale_fill_gradient2()+theme(axis.text.x = element_text(size=6), legend.position = 'bottom')
c
c=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=scale(margin)), color='white')+labs(title='Absolute Gross Margin across Countries over different Quarters')+scale_fill_gradient2(high="green", low="red")+theme(axis.text.x = element_text(size=6), legend.position = 'bottom')
c
c=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=margin), color='white')+labs(title='Absolute Gross Margin across Countries over different Quarters')+scale_fill_gradient2(high="green", low="red")+theme(axis.text.x = element_text(size=6), legend.position = 'bottom')
c
c=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=margin), color='white')+labs(title='Absolute Gross Margin across Countries over different Quarters')+scale_fill_gradient2()+theme(axis.text.x = element_text(size=6), legend.position = 'bottom')
c
c=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=margin), color='white')+labs(title='Absolute Gross Margin across Countries over different Quarters')+scale_fill_gradient2(high="green", low="red")+theme(axis.text.x = element_text(size=6), legend.position = 'bottom')
c
a=ggplot(sales, aes(Retailer.country,Quarter[order(match(sales$Quarter,ord))]))+geom_tile(aes(fill=Revenue), color='white')+labs(title='Revenue of Countries over different Quarters')+scale_fill_viridis()+theme(axis.text.x = element_text(size=6), legend.position = 'bottom')
a
library('mi')
score=read.csv("Most-Recent-Cohorts-Scorecard-Elements.csv", na = c("", "NULL"))
colnames(score)
satActScores=score[,23:45]
image(missing_data.frame(satActScores))
View(score)
colnames(score)
satActScores=score[,46:83]
image(missing_data.frame(satActScores))
satActScores=score[,23:45]
image(missing_data.frame(satActScores))
visna(programsOff)
programsOff=score[,46:83]
visna(programsOff)
visna(satActScores)
programsOff=score[,46:83]
image(missing_data.frame(programsOff))
score=read.csv("Most-Recent-Cohorts-Scorecard-Elements.csv", na = c("", "NULL"))
image(missing_data.frame(programsOff))
summary(satActScores)
tidyScore <- satActScores %>%
rownames_to_column("id") %>%
gather(key, value, -id) %>%
mutate(missing = ifelse(is.na(value), "yes", "no"))
ggplot(tidyScore, aes(x = key, y = id, fill = missing)) +
geom_tile(color = "white") + scale_fill_viridis(discrete = TRUE)
tidyScore <- satActScores %>%
rownames_to_column("id") %>%
gather(key, value, -id) %>%
mutate(missing = ifelse(is.na(value), "yes", "no"))
ggplot(tidyScore, aes(x = key, y = id, fill = missing)) + geom_tile(color = "white") + scale_fill_viridis(discrete = TRUE)
View(tidyScore)
View(tidyScore)
ggplot(tidyScore[:1000], aes(x = key, y = id, fill = missing)) + geom_tile(color = "white") + scale_fill_viridis(discrete = TRUE)
ggplot(tidyScore[:1000,], aes(x = key, y = id, fill = missing)) + geom_tile(color = "white") + scale_fill_viridis(discrete = TRUE)
ggplot(tidyScore[1:1000,], aes(x = key, y = id, fill = missing)) + geom_tile(color = "white") + scale_fill_viridis(discrete = TRUE)
ggplot(tidyScore[1:500,], aes(x = key, y = id, fill = missing)) + geom_tile(color = "white") + scale_fill_viridis(discrete = TRUE)
tidyScoreSub=tidyScore[sample(nrow(tidyScore), 2000),]
ggplot(tidyScoreSub, aes(x = key, y = id, fill = missing)) + geom_tile(color = "white") + scale_fill_viridis(discrete = TRUE)
tidyScoreSub=tidyScore[sample(nrow(tidyScore), 200),]
ggplot(tidyScoreSub, aes(x = key, y = id, fill = missing)) + geom_tile(color = "white") + scale_fill_viridis(discrete = TRUE)
ggplot(tidyScoreSub, aes(x = key, fill = missing)) + geom_tile(color = "white") + scale_fill_viridis(discrete = TRUE)
ggplot(tidyScoreSub, aes(x = key, y = id, fill = missing)) + geom_tile(color = "white") + scale_fill_viridis(discrete = TRUE)
ggplot(tidyScoreSub, aes(x = key, y = id, fill = missing)) + geom_tile(color = "white") + scale_fill_viridis(discrete = TRUE)+theme(axis.text.x = element_text(size=6), legend.position = 'bottom')
ggplot(tidyScoreSub, aes(x = key, y = id, fill = missing)) + geom_tile(color = "white") + scale_fill_viridis(discrete = TRUE)+theme(axis.text.x = element_text(size=5),axis.text.y = element_blank(),  legend.position = 'bottom')
rm(list=ls())
setwd("~/Projects/edav")
day=read.csv('Data/Ascii/DAYV2PUB.CSV')
str(day)
View(day)
colnames(day)
str(day['TRPTRANS'])
summary(day['TRPTRANS'])
str(day['TRPTRANS'])
table(day['TRPTRANS'])
table(day['TRPTRANS']==21)
hist(day['TRPTRANS'])
hist(day['TRPTRANS'])
hist(day$TRPTRANS)
plot(day$TRPTRANS)
day$TRPTRANS=as.factor(day$TRPTRANS)
str(day$TRPTRANS)
libary(ggplot2)
library(ggplot2)
ggplot(data=day, aes(day$TRPTRANS))+geom_histogram()
ggplot(data=day, aes(day$TRPTRANS))+geom_histogram(stat='count')
airdata=day[day$TRPTRANS==21]
airdata=day[day$TRPTRANS==21,]
str(airdata)
table(airdata$HHSTATE)
plot(airdata$HHSTATE)
View(airdata)
ggplot(data=airdata, aes(HHSTATE))+geom_histogram()
ggplot(data=airdata, aes(HHSTATE))+geom_histogram(stat='count')
ggplot(data=airdata, aes(HHSTATE))+geom_histogram(stat='count')+theme(axis.text.x = element_text(size = 10))
ggplot(data=airdata, aes(HHSTATE))+geom_histogram(stat='count')+theme(axis.text.x = element_text(size = 4))
ggplot(data=airdata, aes(HHSTATE))+geom_histogram(stat='count', aes(color=HHSTATE))+theme(axis.text.x = element_text(size = 4))
ggplot(data=airdata, aes(HHSTATE))+geom_histogram(stat='count', aes(fill=HHSTATE))+theme(axis.text.x = element_text(size = 4))
ggplot(data=airdata, aes(HHSTATE))+geom_histogram(stat='count', aes(fill=HHSTATE))+theme(axis.text.x = element_text(size = 4))+guides(fill=FALSE)
ggplot(data=airdata, aes(HHSTATE))+geom_histogram(stat='count'+
theme(axis.text.x = element_text(size = 4))+guides(fill=FALSE)
h
ggplot(data=airdata, aes(HHSTATE))+geom_histogram(stat='count')+theme(axis.text.x = element_text(size = 4))+guides(fill=FALSE)
rm(list=ls())
library('ggplot2')
transMode=ggplot(data=nhts, aes(nhts$TRPTRANS))+geom_histogram(stat='count')
#Read national household travel Survey data
nhts=read.csv('Data/Ascii/nhtsV2PUB.CSV')
setwd("~/Projects/edav")
setwd("~/Projects/edav")
#Read national household travel Survey data
nhts=read.csv('Data/Ascii/nhtsV2PUB.CSV')
nhts=read.csv('Data/Ascii/DAYV2PUB.CSV')
day$TRPTRANS=as.factor(nhts$TRPTRANS)
nhts$TRPTRANS=as.factor(nhts$TRPTRANS)
str(nhts$TRPTRANS)
transMode=ggplot(data=nhts, aes(nhts$TRPTRANS))+geom_histogram(stat='count')
airdata=nhts[nhts$TRPTRANS==21,]
airModeDist=ggplot(data=airdata, aes(HHSTATE))+geom_histogram(stat='count')+
theme(axis.text.x = element_text(size = 4))+guides(fill=FALSE)
airModeDist
airCarriers=read.csv('Data/T100_MARKET_ALL_CARRIER.csv')
rm(nhts)
str(airCarriers)
masterCoord=read.csv('59836722_T_MASTER_CORD.csv')
masterCoord=read.csv('Data/59836722_T_MASTER_CORD.csv')
masterCoord=read.csv('Data/59836722_T_MASTER_CORD.csv')
str(masterCoord)
str(airCarriers)
airCarriers$ORIGIN_AIRPORT_ID=as.factor(airCarriers$ORIGIN_AIRPORT_ID)
str(airCarriers)
levels(airCarriers$ORIGIN)
str(masterCoord)
levels(masterCoord$AIRPORT)
levels(airCarriers$ORIGIN)
intersect(masterCoord$AIRPORT, airCarriers$ORIGIN)
table(intersect(masterCoord$AIRPORT, airCarriers$ORIGIN))
length(intersect(masterCoord$AIRPORT, airCarriers$ORIGIN))
length(levels(masterCoord$AIRPORT))
length(intersect(masterCoord$AIRPORT, airCarriers$ORIGIN))
length(levels(airCarriers$ORIGIN))
length(intersect(masterCoord$AIRPORT, airCarriers$ORIGIN))
View(masterCoord)
colnames(masterCoord)
str(masterCoord)
View(airCarriers)
View(masterCoord)
View(masterCoord)
View(masterCoord)
airportInfo=masterCoord[,3, 4, 5, 8, 10, 11, 12, 14, 15, 22, 27]
airportInfo=masterCoord[,c(3, 4, 5, 8, 10, 11, 12, 14, 15, 22, 27)]
View(airportInfo)
colnames(airCarriers)
View(airCarriers)
View(airportInfo)
airportInfo=masterCoord[,c(3, 4, 5, 22, 27)]
View(airportInfo)
airCarriers$ORIGIN
finalAir=merge(airCarriers, airportInfo, by.x = 'ORIGIN', by.y = 'AIRPORT', all.x = TRUE)
View(finalAir)
finalAir=merge(airCarriers, airportInfo, by.x = 'ORIGIN', by.y = 'AIRPORT')
finalAir=merge(airCarriers, airportInfo, by.x = 'ORIGIN', by.y = 'AIRPORT', all.y = FALSE, all.x = TRUE)
length(unique(airportInfo))
length(unique(airportInfo$AIRPORT))
length(airportInfo$AIRPORT)
View(finalAir)
View(airportInfo)
unique(airportInfo)
length(unique(airportInfo))
airportInfo2=unique(airportInfo)
View(airportInfo2)
table(duplicated(airportInfo$AIRPORT))
airportInfo2=airportInfo[!duplicated(airportInfo$AIRPORT),]
View(airportInfo2)
finalAir=merge(airCarriers, airportInfo, by.x = 'ORIGIN', by.y = 'AIRPORT', all.y = FALSE, all.x = TRUE)
View(finalAir)
?sample
sample(airCarriers, 5)
n=nrow(airCarriers)
samp=sample(n, 10)
airCar=airCarriers[samp, ]
View(airCar)
finalAir=merge(airCar, airportInfo, by.x = 'ORIGIN', by.y = 'AIRPORT', all.y = FALSE, all.x = TRUE)
View(finalAir)
finalAir=merge(airCar, airportInfo2, by.x = 'ORIGIN', by.y = 'AIRPORT', all.y = FALSE, all.x = TRUE)
finalAir=merge(airCarriers, airportInfo2, by.x = 'ORIGIN', by.y = 'AIRPORT', all.y = FALSE, all.x = TRUE)
View(finalAir)
View(airdata)
scale=310648318/1066
View(airportInfo)
View(airdata)
length(unique(airdata$HOUSEID))
write.csv(airdata,'airdata.csv')
blah=table(airdata$HHSTATE)
blah
sum(blah)
blah*scale
sum(blah*scale)
blah=blah*scale
write.csv(blah,'airdata.csv')
View(finalAir)
View(airportInfo2)
View(finalAir)
View(finalAir)
View(airportInfo)
View(masterCoord)
airUS=masterCoord[masterCoord$AIRPORT_COUNTRY_CODE_ISO=='US',]
View(airUS)
colnames(airUS)
airUS=airUS[,c(2,22,27, 5)]
write.csv(airUS, 'airUS.csv')
blah
prop.table(blah)
airTrips=as.data.frame(prop.table(blah))
View(airTrips)
View(airTrips)
airTrips=as.data.frame(sort(prop.table(blah)))
View(airTrips)
airTrips=as.data.frame(sort(-prop.table(blah)))
View(airTrips)
airTrips=as.data.frame(-sort(prop.table(blah)))
View(airTrips)
airTrips=as.data.frame(sort(prop.table(blah)))
airTrips=as.data.frame(sort(prop.table(blah), decreasing = TRUE))
View(airTrips)
airUS
airTrips
sumr(airTrips[1:3])
sum(airTrips[1:3])
sum(airTrips[1:3],)
sum(airTrips[,1:3])
sum(airTrips[1:3,])
airTrips[1:3,]
airTrips$Freq[1:3]
sum(airTrips$Freq[1:3])
sum(airTrips$Freq[1:4])
airTrips$Freq[1:4]
airTrips[1:4,]
unlink('~/Downloads/HW04-Geocoders_cache', recursive = TRUE)
setwd("~/Downloads")
knitr::opts_chunk$set(echo = TRUE)
airUS=airUS[,c(2,22,27, 5)]
knitr::opts_chunk$set(echo = TRUE)
write.csv(airUS, 'airUS.csv')
pwd
setwd("~/Projects/edav")
